{
    "collab_server" : "",
    "contents" : "############################################################\n#  !!! The results should be reproduced on Windows\n#  \n#  R script for the software paper: \n#  RegularizedSCA: Regularized Simultaneous Component Analysis for\n#  Data Integration in R\n#\n#  Zhengguo Gu, Katrijn Van Deun\n#  Department of Methodology and Statistics\n#  Tilburg University\n#  email: z.gu@uvt.nl (Zhengguo)\n#         K.VanDeun@uvt.nl (Katrijn)\n#\n#\n#  NOTE: This R script was run on R version 3.4.2 on windows\n#        Latest update: November 6, 2017\n#############################################################\n\n### 0. install package\ninstall.packages(\"RegularizedSCA\")\n#install.packages(pkgs=\"C:/Users/Zhengguo/Documents/RegularizedSCA_0.5.0.tar.gz\", repos = NULL)\n\n##############################################################\n##### Empirical example\n#load data\nload(\"D:\\\\Dropbox\\\\Tilburg office\\\\Research SCA\\\\Project 2 software Simultaneous\\\\newdata\\\\family_data.RData\") #pc at home\n\nlibrary(\"psych\")\nlibrary(\"RegularizedSCA\")\ndescribe(family_data[[1]])  #mother\ndescribe(family_data[[2]])  #father\ndescribe(family_data[[3]])  #child\n\ndata<- cbind(mySTD(family_data[[1]]), mySTD(family_data[[2]]), mySTD(family_data[[3]]))\nnum_var <- cbind(dim(family_data[[1]])[2], dim(family_data[[2]])[2], dim(family_data[[3]])[2])\n\n#use VAF method\nsummary(VAF(DATA = data, Jk = num_var, R = 10)) # note: here we choose 5 components because on the 5th component, the variance \n                                                # of the second block is rather large (.104), which is even larger than all the \n                                                # variances in the 4th component. On the other hand, the 4th component cannot \n                                                # be droped because the total variance of the 4th component is larger than \n                                                # the 5th (the total variances of the components are from highest to lowest).\n                                                # Of course, the number of R in this case is chosen rather subjectively. \n\nset.seed(111)\nresults_cv <- cv_sparseSCA(DATA = data, Jk = num_var, R = 5)\nsummary(results_cv)  # the recommended tuning parameters. call summary(results_cv, disp = \"estimatedPT\") to see the estimated P and T matrix \nplot(results_cv)\n\nset.seed(111)\nfinal_results <- sparseSCA(data, num_var, R = 5, \n                           LASSO = 2.82068, \n                           GROUPLASSO = 1.28369, \n                           NRSTART = 20)\nfinal_results$Pmatrix\n\nfinal_Loading <- undoShrinkage(data, R = 5, \n                               final_results$Pmatrix)\nfinal_Loading$Pmatrix\n\nwrite.csv(final_Loading$Pmatrix, file = \"D:\\\\Dropbox\\\\Tilburg office\\\\Research SCA\\\\Project 2 software Simultaneous\\\\newdata\\\\empiricalP.csv\")\n\n\n\n\n############### SECTION: the RegularizedSCA package ##########################\n####### subsection: Exploring the component structure and functionalities\n### 1. load the package and data\nlibrary(\"RegularizedSCA\")\nnames(Herring)  #one can check the names of the data file \"Herring\" \n\n### 2. pre-process the data\nChemPhy <- mySTD(Herring$Herring_ChemPhy)\nSensory <- mySTD(Herring$Herring_Sensory)\nherring_data <- cbind(ChemPhy, Sensory)\nnum_var <- cbind(dim(ChemPhy)[2], dim(Sensory)[2])\n\n### 3. VAF, PCA-GCA, and DISCO-SCA\nvaf <- VAF(DATA = herring_data, Jk = num_var, R = 10)\nsummary(vaf)\n\npca_gca(DATA = herring_data, Jk = num_var) \n       #note: pca_gca() contains a user-computer interaction phase, once\n       #we run pca_gca(DATA = herring_data, Jk = num_var), the console will \n       #display the eigenvalues of block 1 and ask whether the user wants to \n       #see the scree plot. If yes, then the user must enter 1; if No, enter 0.\n       #Then the program will also ask how many components to retain for this block\n       #and the user must give a number. \n       #The aforementioned procedure will be repeated from the first block till the \n       #last block.\n\n\ndiscoresult <- DISCOsca(DATA = herring_data, R = 4, Jk = num_var)\nsummary(discoresult)\n\n### 4. cross-validation \nset.seed(111)\nresults_cv <- cv_sparseSCA(DATA = herring_data, Jk = num_var, R = 4)\nplot(results_cv)\n\nresults_cv$Lasso_values\nresults_cv$GLasso_values\nsummary(results_cv, disp = \"full\")\nsummary(results_cv)  #to check the recommended tuning parameter values\n\n# the final model\nset.seed(111)\nfinal_results <- sparseSCA(herring_data, num_var, R = 4, \n                           LASSO = 0.5281094, \n                           GROUPLASSO = 1.028915, \n                           NRSTART = 20)\nsummary(final_results, disp = \"full\") \n\n# undo the shrinkage\nfinal_Loading <- undoShrinkage(herring_data, R = 4, \n                                  Phat = final_results$Pmatrix)\n\nsummary(final_Loading)\n\n\n### 5. Interpret the Pmatrix - Heatmap (Note that the following code is not in the article)\n# We draw a heatmap \nPmat <- final_Loading$Pmatrix\nkeepname <- rownames(Pmat)\ncolnames(Pmat) <- c('Component 1', 'Component 2', 'Component 3', 'Component 4')\nwrite.csv(Pmat, file='sparseresults.csv')\n\nlibrary(ggplot2)\nnames <- rownames(Pmat)\ncomponent <- colnames(Pmat)\nPmatVec <- c(Pmat)\nnames <- rep(names, 4)\ncomponent <- rep(component, each = 20)\n\n# note that part of the ggplot code below is from https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/\n# which is a website for drawing heatmap using ggplot2. \nPmat_dataframe <- data.frame(Loadings = PmatVec, Variables = factor(names, ordered = T, levels = keepname), Components = component)\n\np <- ggplot(Pmat_dataframe, aes(x = Components, y = Variables) )+\n     geom_tile(aes(fill = Loadings), colour = \"white\") +\n     scale_fill_gradient2(low=\"green\", mid = \"black\", high = \"red\") \n\nbase_size <- 9\np + theme_grey(base_size = base_size) + labs(x = \"\", y = \"\") +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0))\n\n### 6. The T matrix or one can check summary(final_Loading) for T matrix\nfinal_Loading$Tmatrix\n\n####################################################################\n\n###### Subsection: Regularized with known structure\n\n# 1. cv_structuredSCA()\ntargetmatrix <- matrix(c(1, 1, 1, 1, 1, 0, 0, 1), nrow = 2, ncol = 4)\ntargetmatrix\t\n\nmaxLGlasso(DATA = herring_data, num_var, R = 4)$Lasso\n\nset.seed(115)\nresults_cvS <- cv_structuredSCA(DATA = herring_data, Jk = num_var, R = 4, \n                                Target = targetmatrix,\n                                Position = c(1, 2, 3, 4),\n                                LassoSequence = seq(from = 0.0000001, \n                                                    to = 4.278383, \n                                                    length.out = 200))\nplot(results_cvS)\n\nresults_cvS$LassoRegion  #to see the proper region \n\nset.seed(115)\nresult_str <- structuredSCA(DATA = herring_data, Jk = num_var, R = 4,\n                            Target = targetmatrix,\n                            Position = c(1, 2, 3, 4), \n                            LASSO = 0.881476) #here (0.8814760 + 0.9029754)/2 = 0.881476\n\nfinal_comLoadingS <- undoShrinkage(DATA = herring_data, R = 4, \n                                   Phat = result_str$Pmatrix)\nsummary(final_comLoadingS)\n\n### again, we draw a heatmap\nPmatS <- final_comLoadingS$Pmatrix\nkeepname <- rownames(PmatS)\ncolnames(PmatS) <- c('Component 1', 'Component 2', 'Component 3', 'Component 4')\nwrite.csv(PmatS, file='sparseresultsStr.csv')\n\nlibrary(ggplot2)\nnames <- rownames(PmatS)\ncomponent <- colnames(PmatS)\nPmatSVec <- c(PmatS)\nnames <- rep(names, 4)\ncomponent <- rep(component, each = 20)\n\n# note that part of the ggplot code below is from https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/\n# which is a website for drawing heatmap using ggplot2. \nPmatS_dataframe <- data.frame(Loadings = PmatSVec, Variables = factor(names, ordered = T, levels = keepname), Components = component)\n\np <- ggplot(PmatS_dataframe, aes(x = Components, y = Variables) )+\n  geom_tile(aes(fill = Loadings), colour = \"white\") +\n  scale_fill_gradient2(low=\"green\", mid = \"black\", high = \"red\") \n\nbase_size <- 9\np + theme_grey(base_size = base_size) + labs(x = \"\", y = \"\") +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0))\n\n\n",
    "created" : 1509976186652.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3588717457",
    "id" : "3F095840",
    "lastKnownWriteTime" : 1509976221,
    "last_content_update" : 1509976221985,
    "path" : "~/paperRegularizedSCA/paperRSCA.R",
    "project_path" : "paperRSCA.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}